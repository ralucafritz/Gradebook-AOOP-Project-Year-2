package clientSide;

import extras.Gender;
import extras.Util;
import repositories.CourseRepository;
import repositories.ProfessorRepository;

import java.util.HashSet;
import java.util.Set;

public class Professor extends Account{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private Set<Course> courses =  new HashSet<>();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// CONSTRUCTORS ///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /// EMPTY CONSTRUCTOR FOR A PROFESSOR
    public Professor()  {
        super();
    }

    // CONSTRUCTOR WITH PARAMETERS
    public Professor(String name, Gender gender, String dateOfBirth)  {
        super(name, gender, dateOfBirth);
    }

    // CONSTRUCTOR FOR LOADING DATA FROM THE DB
    public Professor(String name, String gender, String dateOfBirth, String courses, int currentId)  {
        super(name, gender, dateOfBirth);
        setCurrentID(currentId);

        String[] courseIds = courses.split(","); // ex 1,2..

        for (String id : courseIds) {
            // ex str = 1,2,3...
            if(!id.isEmpty()) {
                int courseId = Integer.parseInt(id);
                if(courseId!=-1) {
                    Course course = CourseRepository.getInstance().getCourseById(courseId);
                    addCourse(course);
                }
            }
        }
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// MUTATORS //////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void addCourse(Course courseToBeAdded){
        this.courses.add(courseToBeAdded);

    }

    public void removeCourse(Course courseToBeRemoved){
        this.courses.remove(courseToBeRemoved);
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////// ACCESSORS ////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public Set<Course> getCourses() {
        return courses;
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////// PRINTS ///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void accountInfo(){
        super.accountInfo();
    }

    public void printCourses() {
        if(!courses.isEmpty()) {
            System.out.println("\t List teaching courses: \n" +
                    Util.setToString(this.courses, "\t \t", "\n"));
        }
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////// EXTRA METHODS /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void mark(Student student, Course course, int grade)  {
        try {
            for(Course courseSearch : this.courses)
            {
                if (courseSearch.getID() == course.getID()) {
                    student.setGrade(courseSearch, grade);
                }
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String returnCoursesList() {
        StringBuilder stringBuilder = new StringBuilder();
        for (Course course : courses) {
            if (course != null) {
                if (stringBuilder.length() != 0)
                    stringBuilder.append(",");
                int courseId = CourseRepository.getInstance().getIdByCourse(course);
                if(courseId!=-1) {
                    stringBuilder.append(courseId);
                }
            }
        }

        return stringBuilder.toString();
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// DATABASE //////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void updateDB() {
        int professorId = ProfessorRepository.getInstance().getIdByObject(this);
        ProfessorRepository.getInstance().updateProfessor(this, professorId);
    }
}
